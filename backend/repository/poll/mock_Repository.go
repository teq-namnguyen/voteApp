// Code generated by mockery v2.12.2. DO NOT EDIT.

package poll

import (
	context "context"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "github.com/namnguyen/backend/model"

	testing "testing"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, poll
func (_m *MockRepository) Create(ctx context.Context, poll *model.Poll) error {
	ret := _m.Called(ctx, poll)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Poll) error); ok {
		r0 = rf(ctx, poll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPollID provides a mock function with given fields: tx, id
func (_m *MockRepository) DeleteByPollID(tx *gorm.DB, id int) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPollID2 provides a mock function with given fields: tx, id
func (_m *MockRepository) DeleteByPollID2(tx *gorm.DB, id int) error {
	ret := _m.Called(tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(*gorm.DB, int) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, poll
func (_m *MockRepository) Get(ctx context.Context, poll model.Poll) (*[]model.Poll, error) {
	ret := _m.Called(ctx, poll)

	var r0 *[]model.Poll
	if rf, ok := ret.Get(0).(func(context.Context, model.Poll) *[]model.Poll); ok {
		r0 = rf(ctx, poll)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Poll)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Poll) error); ok {
		r1 = rf(ctx, poll)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int) (*model.Poll, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Poll
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Poll); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Poll)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByUserID provides a mock function with given fields: ctx, userID
func (_m *MockRepository) GetListByUserID(ctx context.Context, userID *int) ([]model.Poll, error) {
	ret := _m.Called(ctx, userID)

	var r0 []model.Poll
	if rf, ok := ret.Get(0).(func(context.Context, *int) []model.Poll); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Poll)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestDelete provides a mock function with given fields: ctx, id, test
func (_m *MockRepository) TestDelete(ctx context.Context, id int, test ...func(*gorm.DB, int) error) error {
	_va := make([]interface{}, len(test))
	for _i := range test {
		_va[_i] = test[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...func(*gorm.DB, int) error) error); ok {
		r0 = rf(ctx, id, test...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t testing.TB) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
