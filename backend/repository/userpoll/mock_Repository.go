// Code generated by mockery v2.12.2. DO NOT EDIT.

package userpoll

import (
	context "context"

	model "github.com/namnguyen/backend/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, userPoll
func (_m *MockRepository) Create(ctx context.Context, userPoll *model.UserPoll) error {
	ret := _m.Called(ctx, userPoll)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.UserPoll) error); ok {
		r0 = rf(ctx, userPoll)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateList provides a mock function with given fields: ctx, userPolls
func (_m *MockRepository) CreateList(ctx context.Context, userPolls *[]model.UserPoll) error {
	ret := _m.Called(ctx, userPolls)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]model.UserPoll) error); ok {
		r0 = rf(ctx, userPolls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOrUpdateList provides a mock function with given fields: ctx, userPolls
func (_m *MockRepository) CreateOrUpdateList(ctx context.Context, userPolls *[]model.UserPoll) error {
	ret := _m.Called(ctx, userPolls)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]model.UserPoll) error); ok {
		r0 = rf(ctx, userPolls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPollID provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteByPollID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, userID, pollID
func (_m *MockRepository) Get(ctx context.Context, userID int, pollID int) (*model.UserPoll, error) {
	ret := _m.Called(ctx, userID, pollID)

	var r0 *model.UserPoll
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *model.UserPoll); ok {
		r0 = rf(ctx, userID, pollID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserPoll)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userID, pollID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, userID
func (_m *MockRepository) GetList(ctx context.Context, userID int) (*[]model.UserPoll, error) {
	ret := _m.Called(ctx, userID)

	var r0 *[]model.UserPoll
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]model.UserPoll); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.UserPoll)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRepository creates a new instance of MockRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t testing.TB) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
