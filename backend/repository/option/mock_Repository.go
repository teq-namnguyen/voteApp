// Code generated by mockery v2.12.2. DO NOT EDIT.

package option

import (
	context "context"

	model "github.com/namnguyen/backend/model"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *MockRepository) Create(ctx context.Context, data *model.Option) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Option) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateList provides a mock function with given fields: ctx, data
func (_m *MockRepository) CreateList(ctx context.Context, data *[]model.Option) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *[]model.Option) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByPollID provides a mock function with given fields: ctx, id
func (_m *MockRepository) DeleteByPollID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockRepository) GetByID(ctx context.Context, id int) (*model.Option, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.Option
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Option); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Option)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByPollID provides a mock function with given fields: ctx, pollID
func (_m *MockRepository) GetByPollID(ctx context.Context, pollID int) (*[]model.Option, error) {
	ret := _m.Called(ctx, pollID)

	var r0 *[]model.Option
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]model.Option); ok {
		r0 = rf(ctx, pollID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.Option)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, pollID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByIDs provides a mock function with given fields: ctx, optionsID
func (_m *MockRepository) GetListByIDs(ctx context.Context, optionsID []int) ([]model.Option, error) {
	ret := _m.Called(ctx, optionsID)

	var r0 []model.Option
	if rf, ok := ret.Get(0).(func(context.Context, []int) []model.Option); ok {
		r0 = rf(ctx, optionsID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Option)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, optionsID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListByPollsID provides a mock function with given fields: ctx, listPollID
func (_m *MockRepository) GetListByPollsID(ctx context.Context, listPollID []int) ([]model.Option, error) {
	ret := _m.Called(ctx, listPollID)

	var r0 []model.Option
	if rf, ok := ret.Get(0).(func(context.Context, []int) []model.Option); ok {
		r0 = rf(ctx, listPollID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Option)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, listPollID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOptions provides a mock function with given fields: ctx, options
func (_m *MockRepository) UpdateOptions(ctx context.Context, options []int) error {
	ret := _m.Called(ctx, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) error); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t testing.TB) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
